/**
 * angular2-google-maps - Angular 2 components for Google Maps
 * @version v0.9.0
 * @link https://github.com/SebastianM/angular2-google-maps#readme
 * @license MIT
 */
{"version":3,"sources":["services/google-maps-types.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAW,CAAC","file":"services/google-maps-types.js","sourcesContent":["export var google: any;\n\nexport interface GoogleMap {\n  constructor(el: HTMLElement, opts?: MapOptions): void;\n  panTo(latLng: LatLng | LatLngLiteral): void;\n  setZoom(zoom: number): void;\n  addListener(eventName: string, fn: Function): void;\n  getCenter(): LatLng;\n  setCenter(latLng: LatLng | LatLngLiteral): void;\n  getZoom(): number;\n  setOptions(options: MapOptions): void;\n}\n\nexport interface LatLng {\n  constructor(lat: number, lng: number): void;\n  lat(): number;\n  lng(): number;\n}\n\nexport interface Marker {\n  constructor(options?: MarkerOptions): void;\n  setMap(map: GoogleMap): void;\n  setPosition(latLng: LatLng | LatLngLiteral): void;\n  setTitle(title: string): void;\n  setLabel(label: string | MarkerLabel): void;\n  setDraggable(draggable: boolean): void;\n  setIcon(icon: string): void;\n  getLabel(): MarkerLabel;\n  addListener(eventType: string, fn: Function): void;\n}\n\nexport interface MarkerOptions {\n  position: LatLng | LatLngLiteral;\n  title?: string;\n  map?: GoogleMap;\n  label?: string | MarkerLabel;\n  draggable?: boolean;\n  icon?: string;\n}\n\nexport interface MarkerLabel {\n  color: string;\n  fontFamily: string;\n  fontSize: string;\n  fontWeight: string;\n  text: string;\n}\n\nexport interface LatLngLiteral {\n  lat: number;\n  lng: number;\n}\n\nexport interface MouseEvent { latLng: LatLng; }\n\nexport interface MapOptions {\n  center?: LatLng | LatLngLiteral;\n  zoom?: number;\n  disableDoubleClickZoom?: boolean;\n  disableDefaultUI?: boolean;\n  backgroundColor?: string;\n  draggableCursor?: string;\n  draggingCursor?: string;\n  keyboardShortcuts?: boolean;\n  zoomControl?: boolean;\n}\n\nexport interface InfoWindow {\n  constructor(opts?: InfoWindowOptions): void;\n  close(): void;\n  getContent(): string | Node;\n  getPosition(): LatLng;\n  getZIndex(): number;\n  open(map?: GoogleMap, anchor?: MVCObject): void;\n  setContent(content: string | Node): void;\n  setOptions(options: InfoWindowOptions): void;\n  setPosition(position: LatLng | LatLngLiteral): void;\n  setZIndex(zIndex: number): void;\n}\n\nexport interface MVCObject { constructor(): void; }\n\nexport interface Size {\n  height: number;\n  width: number;\n  constructor(width: number, height: number, widthUnit?: string, heightUnit?: string): void;\n  equals(other: Size): boolean;\n  toString(): string;\n}\n\nexport interface InfoWindowOptions {\n  content?: string | Node;\n  disableAutoPan?: boolean;\n  maxWidth?: number;\n  pixelOffset?: Size;\n  position?: LatLng | LatLngLiteral;\n  zIndex?: number;\n}\n"],"sourceRoot":"/source/"}