/**
 * angular2-google-maps - Angular 2 components for Google Maps
 * @version v0.9.0
 * @link https://github.com/SebastianM/angular2-google-maps#readme
 * @license MIT
 */
{"version":3,"sources":["services/google-maps-api-wrapper.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,UAAU,EAAE,MAAM,EAAC,MAAM,eAAe;OAEzC,EAAC,UAAU,EAAC,MAAM,iBAAiB;OAEnC,EAAC,aAAa,EAAC,MAAM,mCAAmC;AAM/D;;;GAGG;AAEH;IAIE,YAAoB,OAAsB,EAAU,KAAa;QAA7C,YAAO,GAAP,OAAO,CAAe;QAAU,UAAK,GAAL,KAAK,CAAQ;QAC/D,IAAI,CAAC,IAAI;YACL,IAAI,OAAO,CAAqB,CAAC,OAAmB,OAAO,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACjG,CAAC;IAED,SAAS,CAAC,EAAe,EAAE,UAA+B;QACxD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;YAC9B,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YAChD,IAAI,CAAC,YAAY,CAAqB,GAAG,CAAC,CAAC;YAC3C,MAAM,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC;IAED,aAAa,CAAC,OAA4B;QACxC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAqB,OAAO,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,OAAO,GAAmD,EAAE;QAEvE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAuB;YAC5C,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;YAClB,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB,CAAC,OAAoC;QACnD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,mBAAmB,CAAI,SAAiB;QACtC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,QAAqB;YAC7C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAqB;gBACnC,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,GAAM,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,CAAC,MAA8B;QACtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAuB,KAAK,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED,OAAO,KAAsB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAuB,KAAK,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;IAEjG,OAAO,CAAC,IAAY;QAClB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAuB,KAAK,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IACxE,CAAC;IAED,SAAS;QACP,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAuB,KAAK,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;IACtE,CAAC;IAED,MAAM,KAAkC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAE3D;;OAEG;IACH,eAAe,CAAC,SAAiB;QAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;IACxE,CAAC;AACH,CAAC;AAnED;IAAC,UAAU,EAAE;;wBAAA;AAmEZ","file":"services/google-maps-api-wrapper.js","sourcesContent":["import {Injectable, NgZone} from 'angular2/core';\nimport {Observer} from 'rxjs/Observer';\nimport {Observable} from 'rxjs/Observable';\n\nimport {MapsAPILoader} from './maps-api-loader/maps-api-loader';\nimport * as mapTypes from './google-maps-types';\n\n// todo: add types for this\ndeclare var google: any;\n\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\n@Injectable()\nexport class GoogleMapsAPIWrapper {\n  private _map: Promise<mapTypes.GoogleMap>;\n  private _mapResolver: (value?: mapTypes.GoogleMap) => void;\n\n  constructor(private _loader: MapsAPILoader, private _zone: NgZone) {\n    this._map =\n        new Promise<mapTypes.GoogleMap>((resolve: () => void) => { this._mapResolver = resolve; });\n  }\n\n  createMap(el: HTMLElement, mapOptions: mapTypes.MapOptions): Promise<void> {\n    return this._loader.load().then(() => {\n      const map = new google.maps.Map(el, mapOptions);\n      this._mapResolver(<mapTypes.GoogleMap>map);\n      return;\n    });\n  }\n\n  setMapOptions(options: mapTypes.MapOptions) {\n    this._map.then((m: mapTypes.GoogleMap) => { m.setOptions(options); });\n  }\n\n  /**\n   * Creates a google map marker with the map context\n   */\n  createMarker(options: mapTypes.MarkerOptions = <mapTypes.MarkerOptions>{}):\n      Promise<mapTypes.Marker> {\n    return this._map.then((map: mapTypes.GoogleMap) => {\n      options.map = map;\n      return new google.maps.Marker(options);\n    });\n  }\n\n  createInfoWindow(options?: mapTypes.InfoWindowOptions): Promise<mapTypes.InfoWindow> {\n    return this._map.then(() => { return new google.maps.InfoWindow(options); });\n  }\n\n  subscribeToMapEvent<E>(eventName: string): Observable<E> {\n    return Observable.create((observer: Observer<E>) => {\n      this._map.then((m: mapTypes.GoogleMap) => {\n        m.addListener(eventName, (arg: E) => { this._zone.run(() => observer.next(arg)); });\n      });\n    });\n  }\n\n  setCenter(latLng: mapTypes.LatLngLiteral): Promise<void> {\n    return this._map.then((map: mapTypes.GoogleMap) => map.setCenter(latLng));\n  }\n\n  getZoom(): Promise<number> { return this._map.then((map: mapTypes.GoogleMap) => map.getZoom()); }\n\n  setZoom(zoom: number): Promise<void> {\n    return this._map.then((map: mapTypes.GoogleMap) => map.setZoom(zoom));\n  }\n\n  getCenter(): Promise<mapTypes.LatLng> {\n    return this._map.then((map: mapTypes.GoogleMap) => map.getCenter());\n  }\n\n  getMap(): Promise<mapTypes.GoogleMap> { return this._map; }\n\n  /**\n   * Triggers the given event name on the map instance.\n   */\n  triggerMapEvent(eventName: string): Promise<void> {\n    return this._map.then((m) => google.maps.event.trigger(m, eventName));\n  }\n}\n"],"sourceRoot":"/source/"}