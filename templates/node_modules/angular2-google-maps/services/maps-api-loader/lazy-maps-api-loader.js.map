{"version":3,"sources":["lazy-maps-api-loader.js","services/maps-api-loader/lazy-maps-api-loader.ts"],"names":[],"mappings":"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","file":"services/maps-api-loader/lazy-maps-api-loader.js","sourcesContent":[null,"import {Injectable, Optional} from 'angular2/core';\nimport {MapsAPILoader} from './maps-api-loader';\n\nexport enum GoogleMapsScriptProtocol {\n  HTTP,\n  HTTPS,\n  AUTO\n}\n\nexport class LazyMapsAPILoaderConfig {\n  /**\n   * The Google Maps API Key (see:\n   * https://developers.google.com/maps/documentation/javascript/get-api-key)\n   */\n  apiKey: string = null;\n\n  /**\n   * The Google Maps client ID (for premium plans).\n   * When you have a Google Maps APIs Premium Plan license, you must authenticate\n   * your application with either an API key or a client ID.\n   * The Google Maps API will fail to load if both a client ID and an API key are included.\n   */\n  clientId: string = null;\n\n  /**\n   * Google Maps API version.\n   */\n  apiVersion: string = '3';\n\n  /**\n   * Host and Path used for the `<script>` tag.\n   */\n  hostAndPath: string = 'maps.googleapis.com/maps/api/js';\n\n  /**\n   * Protocol used for the `<script>` tag.\n   */\n  protocol: GoogleMapsScriptProtocol = GoogleMapsScriptProtocol.HTTPS;\n\n  /**\n   * Defines which Google Maps libraries should get loaded.\n   */\n  libraries: string[] = [];\n\n  /**\n   * The default bias for the map behavior is US.\n   * If you wish to alter your application to serve different map tiles or bias the\n   * application, you can overwrite the default behavior (US) by defining a `region`.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Region\n   */\n  region: string = null;\n\n  /**\n   * The Google Maps API uses the browser's preferred language when displaying\n   * textual information. If you wish to overwrite this behavior and force the API\n   * to use a given language, you can use this setting.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Language\n   */\n  language: string = null;\n}\n\nconst DEFAULT_CONFIGURATION = new LazyMapsAPILoaderConfig();\n\n@Injectable()\nexport class LazyMapsAPILoader extends MapsAPILoader {\n  private _scriptLoadingPromise: Promise<void>;\n\n  constructor(@Optional() private _config: LazyMapsAPILoaderConfig) {\n    super();\n    if (this._config === null || this._config === undefined) {\n      this._config = DEFAULT_CONFIGURATION;\n    }\n  }\n\n  load(): Promise<void> {\n    if (this._scriptLoadingPromise) {\n      return this._scriptLoadingPromise;\n    }\n\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.defer = true;\n    const callbackName: string = `angular2googlemaps${new Date().getMilliseconds() }`;\n    script.src = this._getScriptSrc(callbackName);\n\n    this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\n      (<any>window)[callbackName] = () => { resolve(); };\n\n      script.onerror = (error: Event) => { reject(error); };\n    });\n\n    document.body.appendChild(script);\n    return this._scriptLoadingPromise;\n  }\n\n  private _getScriptSrc(callbackName: string): string {\n    let protocolType: GoogleMapsScriptProtocol =\n        (this._config && this._config.protocol) || DEFAULT_CONFIGURATION.protocol;\n    let protocol: string;\n\n    switch (protocolType) {\n      case GoogleMapsScriptProtocol.AUTO:\n        protocol = '';\n        break;\n      case GoogleMapsScriptProtocol.HTTP:\n        protocol = 'http:';\n        break;\n      case GoogleMapsScriptProtocol.HTTPS:\n        protocol = 'https:';\n        break;\n    }\n\n    const hostAndPath: string = this._config.hostAndPath || DEFAULT_CONFIGURATION.hostAndPath;\n    const apiKey: string = this._config.apiKey || DEFAULT_CONFIGURATION.apiKey;\n    const clientId: string = this._config.clientId || DEFAULT_CONFIGURATION.clientId;\n    const libraries: string[] = this._config.libraries || DEFAULT_CONFIGURATION.libraries;\n    const region: string = this._config.region || DEFAULT_CONFIGURATION.region;\n    const language: string = this._config.language || DEFAULT_CONFIGURATION.language;\n    const queryParams: {[key: string]: string} = {\n      v: this._config.apiVersion || DEFAULT_CONFIGURATION.apiVersion,\n      callback: callbackName\n    };\n    if (apiKey) {\n      queryParams['key'] = apiKey;\n    }\n    if (clientId) {\n      queryParams['client'] = clientId;\n    }\n    if (libraries != null && libraries.length > 0) {\n      queryParams['libraries'] = libraries.join(',');\n    }\n    if (region != null && region.length > 0) {\n      queryParams['region'] = region;\n    }\n    if (language != null && language.length > 0) {\n      queryParams['language'] = language;\n    }\n    const params: string = Object.keys(queryParams)\n                               .map((k: string, i: number) => {\n                                 let param = (i === 0) ? '?' : '&';\n                                 return param += `${k}=${queryParams[k]}`;\n                               })\n                               .join('');\n    return `${protocol}//${hostAndPath}${params}`;\n  }\n}\n"],"sourceRoot":"/source/"}