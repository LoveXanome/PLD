{"version":3,"sources":["google-map-info-window.js","directives/google-map-info-window.ts"],"names":[],"mappings":"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","file":"directives/google-map-info-window.js","sourcesContent":[null,"import {Component, SimpleChange, OnDestroy, OnChanges, ElementRef} from 'angular2/core';\nimport {InfoWindowManager} from '../services/info-window-manager';\nimport {SebmGoogleMapMarker} from './google-map-marker';\n\nlet infoWindowId = 0;\n\n/**\n * SebmGoogleMapInfoWindow renders a info window inside a {@link SebmGoogleMapMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import {Component} from 'angular2/core';\n * import {SebmGoogleMap, SebmGoogleMapMarker, SebmGoogleMapInfoWindow} from\n * 'angular2-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [SebmGoogleMap, SebmGoogleMapMarker, SebmGoogleMapInfoWindow],\n *  styles: [`\n *    .sebm-google-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <sebm-google-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <sebm-google-map-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <sebm-google-map-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </sebm-google-map-info-window>\n *      </sebm-google-map-marker>\n *    </sebm-google-map>\n *  `\n * })\n * ```\n */\n@Component({\n  selector: 'sebm-google-map-info-window',\n  inputs: ['latitude', 'longitude', 'disableAutoPan'],\n  template: `\n    <div class='sebm-google-map-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class SebmGoogleMapInfoWindow implements OnDestroy,\n    OnChanges {\n  /**\n   * The latitude position of the info window (only usefull if you use it ouside of a {@link\n   * SebmGoogleMapMarker}).\n   */\n  latitude: number;\n\n  /**\n   * The longitude position of the info window (only usefull if you use it ouside of a {@link\n   * SebmGoogleMapMarker}).\n   */\n  longitude: number;\n\n  /**\n   * Disable auto-pan on open. By default, the info window will pan the map so that it is fully\n   * visible when it opens.\n   */\n  disableAutoPan: boolean;\n\n  /**\n   * All InfoWindows are displayed on the map in order of their zIndex, with higher values\n   * displaying in front of InfoWindows with lower values. By default, InfoWindows are displayed\n   * according to their latitude, with InfoWindows of lower latitudes appearing in front of\n   * InfoWindows at higher latitudes. InfoWindows are always displayed in front of markers.\n   */\n  zIndex: number;\n\n  /**\n   * Maximum width of the infowindow, regardless of content's width. This value is only considered\n   * if it is set before a call to open. To change the maximum width when changing content, call\n   * close, update maxWidth, and then open.\n   */\n  maxWidth: number;\n\n  /**\n   * Holds the marker that is the host of the info window (if available)\n   */\n  hostMarker: SebmGoogleMapMarker;\n\n  /**\n   * Holds the native element that is used for the info window content.\n   */\n  content: Node;\n\n  private static _infoWindowOptionsInputs: string[] = ['disableAutoPan', 'maxWidth'];\n  private _infoWindowAddedToManager: boolean = false;\n  private _id: string = (infoWindowId++).toString();\n\n  constructor(private _infoWindowManager: InfoWindowManager, private _el: ElementRef) {}\n\n  ngOnInit() {\n    this.content = this._el.nativeElement.querySelector('.sebm-google-map-info-window-content');\n    this._infoWindowManager.addInfoWindow(this);\n    this._infoWindowAddedToManager = true;\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (!this._infoWindowAddedToManager) {\n      return;\n    }\n    if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n        typeof this.longitude === 'number') {\n      this._infoWindowManager.setPosition(this);\n    }\n    if (changes['zIndex']) {\n      this._infoWindowManager.setZIndex(this);\n    }\n    this._setInfoWindowOptions(changes);\n  }\n\n  private _setInfoWindowOptions(changes: {[key: string]: SimpleChange}) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys = Object.keys(changes).filter(\n        k => SebmGoogleMapInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    this._infoWindowManager.setOptions(this, options);\n  }\n\n  /**\n   * Opens the info window.\n   */\n  open(): Promise<void> { return this._infoWindowManager.open(this); }\n\n  /**\n   * Closes the info window.\n   */\n  close(): Promise<void> { return this._infoWindowManager.close(this); }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return 'SebmGoogleMapInfoWindow-' + this._id.toString(); }\n\n  /** @internal */\n  ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\n}\n"],"sourceRoot":"/source/"}